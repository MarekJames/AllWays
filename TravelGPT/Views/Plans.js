/*

Plans.js 
  
  -> File called when the user selects "Travel Plans" in the OptionsScreen of the App.js file
  -> Allows the user to select the amount of days he/she intends to travel and the intended destination
  -> Returns a travel plan generated by the chat gpt api specific to the user input

*/




/******************** Imports Section ********************/ 

// Imports for the react components add buttons, images, text, etc
import React, {useState, useEffect} from 'react';  
import {Image, ActivityIndicator, StyleSheet, View, Text, Pressable, TextInput, Dimensions, TouchableOpacity, FlatList, ScrollView, BackHandler, Alert} from 'react-native';  
import "react-native-url-polyfill/auto"
import axios from 'axios';
import FastImage from 'react-native-fast-image';


// Imports the location api's and components
import {getCurrentPositionAsync, requestForegroundPermissionsAsync, reverseGeocodeAsync} from 'expo-location';
import MapView , {Marker, Callout} from 'react-native-maps'
import * as Font from 'expo-font';

// Imports the openai components
import { Configuration, OpenAIApi } from 'openai'

// Imports images
import SVGLogo from '../Images/RouteMasterLogo.svg'


/******************* Global Variables ********************/

var days          // Stores the amount of days the user intends to travel
var destination   // Stores the destination that the user intends to travel to
var listsPlan     // Stores the plan received from the chatgpt api
const windowWidth = Dimensions.get('window').width;   // Get width of the user screen
const windowHeight = Dimensions.get('window').height; // Get height of the user screen

listsPlan = [
  {"day": "Day 1", 
   "activities" : [{"name": "Visit the Colosseum",
                    "description": "Walk through the colosseum....."},

                    {"name": "Visit the Roman Forum",
                    "description": "Walk through the forum....."},

                    {"name": "Palatine Hill",
                    "description": " Suck my balls in palatine hill"},

                    {"name": "Jao is Gay",
                    "description": "Finger Jao"},

                    {"name": "Jao takes it up the bum",
                    "description": "A lot"}
                    ]},
    {"day": "Day 2", 
    "activities" : [{"name": "Eat at Pizzaria",
                      "description": "Eat at the pizzaria near the colisseum"},

                      {"name": "Visit the river near the...",
                      "description": "Desc for act 2"},

                      {"name": "Palatine Hill",
                      "description": " Suck my balls in palatine hill"},

                      {"name": "aaaaa",
                      "description": "bbbbbbbbb"},

                      {"name": "llllllllll",
                      "description": "oooooooo"}
                      ]},
   {"day": "Day 3",
   "activities" : [{"name": "Visit the Colosseum",
                    "description": "Walk through the colosseum....."},

                    {"name": "Visit the Roman Forum",
                    "description": "Walk through the forum....."},

                    {"name": "Palatine Hill",
                    "description": " Suck my balls in palatine hill"},

                    {"name": "Jao is Gay",
                    "description": "Finger Jao"},

                    {"name": "Jao takes it up the bum",
                    "description": "Sometimes"}
                    ]
    },
    {"day": "Day 4",
    "activities" : [{"name": "Visit the Colosseum",
                     "description": "Walk through the colosseum....."},
 
                     {"name": "Visit the Roman Forum",
                     "description": "Walk through the forum....."},
 
                     {"name": "Palatine Hill",
                     "description": " Suck my balls in palatine hill"},
 
                     {"name": "Jao is Gay",
                     "description": "Finger Jao"},
 
                     {"name": "Jao takes it up the bum",
                     "description": "Sometimes"}
                     ]
     },
     {"day": "Day 5",
     "activities" : [{"name": "Visit the Colosseum",
                      "description": "Walk through the colosseum....."},
  
                      {"name": "Visit the Roman Forum",
                      "description": "Walk through the forum....."},
  
                      {"name": "Palatine Hill",
                      "description": " Suck my balls in palatine hill"},
  
                      {"name": "Jao is Gay",
                      "description": "Finger Jao"},
  
                      {"name": "Jao takes it up the bum",
                      "description": "Sometimes"}
                      ]
      },
      {"day": "Day 6",
      "activities" : [{"name": "Visit the Colosseum",
                       "description": "Walk through the colosseum....."},
   
                       {"name": "Visit the Roman Forum",
                       "description": "Walk through the forum....."},
   
                       {"name": "Palatine Hill",
                       "description": " Suck my balls in palatine hill"},
   
                       {"name": "Jao is Gay",
                       "description": "Finger Jao"},
   
                       {"name": "Jao takes it up the bum",
                       "description": "Sometimes"}
                       ]
       },
       {"day": "Day 7",
       "activities" : [{"name": "Visit the Colosseum",
                        "description": "Walk through the colosseum....."},
    
                        {"name": "Visit the Roman Forum",
                        "description": "Walk through the forum....."},
    
                        {"name": "Palatine Hill",
                        "description": " Suck my balls in palatine hill"},
    
                        {"name": "Jao is Gay",
                        "description": "Finger Jao"},
    
                        {"name": "Jao takes it up the bum",
                        "description": "Sometimes"}
                        ]
        },
        {"day": "Day 8",
        "activities" : [{"name": "Visit the Colosseum",
                         "description": "Walk through the colosseum....."},
     
                         {"name": "Visit the Roman Forum",
                         "description": "Walk through the forum....."},
     
                         {"name": "Palatine Hill",
                         "description": " Suck my balls in palatine hill"},
     
                         {"name": "Jao is Gay",
                         "description": "Finger Jao"},
     
                         {"name": "Jao takes it up the bum",
                         "description": "Sometimes"}
                         ]
         },
         {"day": "Day 9",
         "activities" : [{"name": "Visit the Colosseum",
                          "description": "Walk through the colosseum....."},
      
                          {"name": "Visit the Roman Forum",
                          "description": "Walk through the forum....."},
      
                          {"name": "Palatine Hill",
                          "description": " Suck my balls in palatine hill"},
      
                          {"name": "Jao is Gay",
                          "description": "Finger Jao"},
      
                          {"name": "Jao takes it up the bum",
                          "description": "Sometimes"}
                          ]
          }
]

var routePlan = []

/************** Open AI / Chat GPT configs ***************/

// Configs the apiKey -> We may need to encrypt this key
const config = new Configuration({
  apiKey: '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'
})

// Configs the openai api
const openai = new OpenAIApi(config)


const accessKey = 'Q37z9gm8MYXdVPEDA6MFPe77A9jHWLdM9pLtqr060Xo'


/*********************** Classes *************************/

/*

  PlansScreen class
  Displayed after selecting Travel Plans in the OptionsScreen of the App.js file
  Allows the user to choose the amount of days he/she intends to travel and the desired destination

*/
export class PlansScreen extends React.Component {  
    
    // Constructor
    constructor(props) {
      super(props);
      this.state = {
          fontsLoaded: false
      }
    }

    // Load text fonts function
    async loadFonts() {
      await Font.loadAsync({
        'Sansation': require('../assets/fonts/Sansation_Regular.ttf'),
        'SansationBold': require('../assets/fonts/Sansation_Bold.ttf'),
      });
      this.setState({ fontsLoaded: true });
    }

    // Call load fonts function after component mounted
    componentDidMount() {
      this.loadFonts();
    }

    // pontosScreen Function that configs what is displayed in this class
    pontosScreen = () => {
     
      // Defines a constant to store the amount of days
      const [number, onChangeNumber] = React.useState('');

      // Equals the days global variable to the value of the number variable
      useEffect(() => {
        days = number
      })

      // Defines the screen components
      return (

        <View style={{ backgroundColor: '#C68092',   flex: 1, alignItems: 'stretch', width:'100%', height:'100%',}}>  
          <Text style = {styles.whereToText}>Where to?</Text>
          <Text style = {styles.wellGiveText}>We'll give you the route for it</Text>
          
          <Text style = {styles.whereToGoText}>Where to go?</Text>
          
          <Pressable style = {styles.whereToGoButton} onPress = { () => {this.props.navigation.navigate("MapsPlans")}}>
            <TextInput
            style = {styles.whereToGoInput}
            editable = {false}
            placeholder ="Click here"
            placeholderTextColor={'#000000'}
            />
          </Pressable>

          <Text style = {styles.howManyDaysText}>How many days?</Text>
          
          <Pressable style = {styles.howManyDaysButton}>
            <TextInput
            style = {styles.whereToGoInput}
            placeholder ="Click here"
            placeholderTextColor={'#000000'}
            onChangeText={onChangeNumber}
            value = {number}
            />
          </Pressable>

          

          <Pressable style = {styles.routeUpButton}  onPress = { () => {getPlan(this.props.navigation)}}>
            <TextInput
            style = {styles.routeUpInput}
            editable = {false}
            placeholder ="Route up!"
            placeholderTextColor={'#FFFFFF'}
            />
          </Pressable>

        </View>  
      ); 
    }

    // Renders the screen components defined in the pontosScreen function
    render() {  
      return (
        <this.pontosScreen></this.pontosScreen>
      )
        
    }
     
}

export class MapsPlansScreen extends React.Component { 

    mapsScreen = () => {
      
      const [location, setLocation] = useState(false);
    
      async function getLocation(){
  
        const {granted} = await requestForegroundPermissionsAsync()
      
        if(granted){
         
          const currentPosition = await getCurrentPositionAsync() 
          setLocation(currentPosition.coords)
        
        }
        else{
          console.log("Didn't give permissions")
        }
      
      }
  
      useEffect(() => {
      
        getLocation()
      } , []);
  
      return (
        
        <View style={styles.containerMap}> 
  
          {(location && 
          <MapView 
            style = {{flex:1, width:'100%', height:'100%'}}
            onPress= {e => setLocation(e.nativeEvent.coordinate)}
            initialRegion = {{
              latitude: location.latitude,
              longitude:location.longitude,
              latitudeDelta: 0.05,
              longitudeDelta: 0.05
            }}
            
          >
            <Marker coordinate={{
              latitude: location.latitude,
              longitude: location.longitude
  
            }}></Marker>
          </MapView>
          )} 
  
          <Callout>
            <View style={styles.calloutView} >
              <Pressable style={styles.calloutSearch} onPress = {() => closeMap(location, this.props.navigation)}>
                <Text >
                  Done
                </Text>
              </Pressable>
            </View>
          </Callout>
  
        </View> 
      );
    }
  
    render() { 
        return (
         
          <this.mapsScreen/>
     
        )
    }
  }

export class LoadingScreen extends React.Component{
  
  render(){
    return (
      <View style = {styles.container}>
         
        <SVGLogo
          style = {loadingScreenStyle.imageLogo}
        />
          
        <Text style = {{fontSize:20}}> Generating your response</Text>
        <Text style = {{fontSize:15}}> Wait a moment</Text>
        <Text> {" "}</Text>
        <ActivityIndicator size="large"/>
      </View>
    )
  }
}

export class DaysScreen extends React.Component {  
  
  constructor(props) {
    super(props);
    this.state = {
      fontsLoaded: false,
      showDayRoutePlan: false
    };
  }
  
  // Load text fonts function
  async loadFonts() {
    await Font.loadAsync({
      'Sansation': require('../assets/fonts/Sansation_Regular.ttf'),
      'SansationBold': require('../assets/fonts/Sansation_Bold.ttf'),
    });
    this.setState({ fontsLoaded: true });
  }

  // Call load fonts function after component mounted
  componentDidMount() {
    this.loadFonts();
  }

  lists = () => {
    if (this.state.fontsLoaded) {
      return listsPlan.map((item, index) => (
        <TouchableOpacity key={item.day} style = {AccordionStyles.dayContainer} onPress={() => {routePlan= listsPlan[index]; this.setState({ showDayRoutePlan: true })}}>
          <Text style = {AccordionStyles.dayText}>{item.day}</Text>
        </TouchableOpacity>
      ));
    }
  }

  render() {

    const DayRoutePlan = () => {

      const [towerOfPisaImage, setTowerOfPisaImage] = useState([]);
      
      useEffect(() => {
        // Fetch image of the Leaning Tower of Pisa when the component mounts
        fetchTowerOfPisaImage();
      }, []);
    
      useEffect(() => {
        const backAction = () => {
          Alert.alert('Hold on!', 'Are you sure you want to go back?', [
            {
              text: 'Cancel',
              onPress: () => null,
              style: 'cancel',
            },
            {text: 'YES', onPress: () => this.setState({ showDayRoutePlan: false })},
          ]);
          return true;
        };
    
        const backHandler = BackHandler.addEventListener(
          'hardwareBackPress',
          backAction,
        );
    
        return () => backHandler.remove();
      }, []);
    
      const fetchTowerOfPisaImage = async () => {
        try {
          const accessKey = accessKey; // Replace with your actual Unsplash Access Key
          const response = await axios.get('https://api.unsplash.com/photos/random', {
            params: {
              client_id: 'Q37z9gm8MYXdVPEDA6MFPe77A9jHWLdM9pLtqr060Xo',
              query: 'Tower of Pisa Italy', // Search query for the Tower of Pisa in Italy
              count: 5, // Number of images you want to fetch (in this case, just one)
            },
          });
    
          // Store the image URL in state
          const imagesOfPisa = response.data.map((photo) => photo.urls.regular);
          setTowerOfPisaImage(imagesOfPisa);
        } catch (error) {
          console.error('Error fetching image:', error);
        }
      };
    
      if (towerOfPisaImage) { 
        return routePlan.activities.map((item, index) => (   
          
          <View style={styles.square} key={index}>
        {/* Image at the top occupying 30% of the square */}
        <Image
          source={{ uri: towerOfPisaImage[index] }}
          style={styles.image}
        />

        {/* Title and description */}
        <View style={styles.textContainer}>
          <Text style={styles.title}>Tower of Pisa</Text>
          <Text style={styles.description}>
            Description text goes here. Replace this with actual description.
          </Text>
        </View>

        {/* Buttons at the bottom */}
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button}>
            <Text style={styles.buttonText}>Maps</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.button}>
            <Text style={styles.buttonText}>+Info</Text>
          </TouchableOpacity>
        </View>
      </View>
          // <View style={AccordionStyles.activityItem} key={index}>
          //   <Text style={AccordionStyles.activityName}>{'\u2022'} {item.name}</Text>
          //   <Text style={AccordionStyles.activityDescription}>{'\u25CF'} {item.description}</Text>
          //   { <Image
          //     source={{ uri: towerOfPisaImage[index] }}
          //     style={AccordionStyles.activityImage} 
          //   />}
          // </View>
        ))
      }
    }

    if(this.state.fontsLoaded && !this.state.showDayRoutePlan){
      return (

        <View style={ParentStyles.container}>
          <Text style={ParentStyles.listTitle}> Discover "City Name" </Text>
          <Text style={ParentStyles.listSubtitle}> Here is the perfect route for "Number" days </Text>
          <ScrollView style={{flex:1}}>
            {this.lists()}
          </ScrollView>
        </View>
      );
    }
    else if(this.state.fontsLoaded && this.state.showDayRoutePlan){
      return (
        <View style={ParentStyles.container}>
          <ScrollView style={{flex:1}}>
            <Text style={ParentStyles.listTitle}> Discover "City Name" </Text>
            <Text style={ParentStyles.listSubtitle}> Here is the perfect route for "Number" days </Text>
            <Text style={AccordionStyles.dayText}> {routePlan.day} </Text>
            <View style={{alignItems:'center'}}><DayRoutePlan/></View>
          </ScrollView>
        </View>
      );
    }
  }
}

const AccordionList = ({ listsPlan }) => {
  const [expandedIds, setExpandedIds] = useState([]);

  const toggleExpand = (day) => {
    if (expandedIds.includes(day)) {
      setExpandedIds(expandedIds.filter((id) => id !== day));
    } else {
      setExpandedIds([...expandedIds, day]);
    }
  };

  const isExpanded = (day) => expandedIds.includes(day);

  const [towerOfPisaImage, setTowerOfPisaImage] = useState([]);

  useEffect(() => {
    // Fetch image of the Leaning Tower of Pisa when the component mounts
    fetchTowerOfPisaImage();
  }, []);

  const fetchTowerOfPisaImage = async () => {
    try {
      const accessKey = accessKey; // Replace with your actual Unsplash Access Key
      const response = await axios.get('https://api.unsplash.com/photos/random', {
        params: {
          client_id: 'Q37z9gm8MYXdVPEDA6MFPe77A9jHWLdM9pLtqr060Xo',
          query: 'Tower of Pisa Italy', // Search query for the Tower of Pisa in Italy
          count: 5, // Number of images you want to fetch (in this case, just one)
        },
      });

      // Store the image URL in state
      const imagesOfPisa = response.data.map((photo) => photo.urls.regular);
      setTowerOfPisaImage(imagesOfPisa);
    } catch (error) {
      console.error('Error fetching image:', error);
    }
  };
  const renderItem = ({ item }) => {
    return (
      <View style={AccordionStyles.container}>
        <TouchableOpacity
          style={AccordionStyles.dayContainer}
          onPress={() => toggleExpand(item.day)}
        >
          <Text style={AccordionStyles.dayText}>{item.day}</Text>
        </TouchableOpacity>
        {isExpanded(item.day) && towerOfPisaImage && (
          <View style={AccordionStyles.activitiesContainer}>
            {item.activities.map((activity, index) => (
              <View style={AccordionStyles.activityItem} key={index}>
                <Text style={AccordionStyles.activityName}>{'\u2022'} {activity.name}</Text>
                <Text style={AccordionStyles.activityDescription}>{'\u25CF'} {activity.description}</Text>
                <Image
                  source={{ uri: towerOfPisaImage[index] }}
                  style={AccordionStyles.activityImage}
                  
                />
              </View>
            ))}
          </View>
        )}
      </View>
    );
  };

  return (
    <FlatList
      data={listsPlan}
      keyExtractor={(item) => item.day}
      renderItem={renderItem}
    />
  );
};

async function getPlan(navigator) {

  //const city = await reverseGeocodeAsync(destination)

  //var prompt = 'Can you give a JSON file with a plan for ' + days +' days in ' + city[0].city +', '+ city[0].country +' using this format as example [{"day": "day1", "activities" : ["activity1", "activity2", "activity3"]}] ? Give 5 activities for each day'
  var prompt = 'Can you give a JSON file with a plan for ' + days +' days in Rome, Italy using this format as example [{"day": "day1", "activities" : ["activity1", "activity2", "activity3"]}] ? Give 5 activities for each day'
  
  
  // const res = await openai.createCompletion({
  //   model: "text-davinci-003",
  //   prompt: prompt,
  //   max_tokens: 2048
  // })

  //console.log(res.data.choices[0].text)
  //console.log(JSON.parse(res.data.choices[0].text))
  //listsPlan = JSON.parse(res.data.choices[0].text)
  navigator.navigate("LoadingScreen")

  // Waits 10 seconds for testing purposes
  // Only needed if chatgpt is commented
  const delay = ms => new Promise(async resolve => setTimeout(resolve, ms))
  await delay(1000)

  console.log(listsPlan)

  navigator.navigate("ListPlans")
  
}

function closeMap(location, Navigator){

  destination = location
  Navigator.navigate('Plans')

}

const styles2 = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: 'ghostwhite',
      alignItems: 'center',
      justifyContent: 'center',
    },
   
    containerMap: {
      flex: 1,
      padding: 10,
      justifyContent: 'center',
      alignItems: 'center',
    },
    button:{
      alignItems: 'center',
      justifyContent: 'center',
      paddingVertical: 12,
      paddingHorizontal: 32,
      borderRadius: 4,
      elevation: 3,
      backgroundColor: 'black',
      width: 200,
      height:50,
      borderRadius:10
    },
  
    text:{
      alignItems: 'center',
      justifyContent: 'center',
      color: 'ghostwhite',
    },
    calloutView: {
      flex:0.3,
      flexDirection: "row",
      backgroundColor: "rgba(255, 255, 255, 0.9)",
      borderRadius: 10,
      top:300,
      width: "100%",
      height: "100%",
      
    },
    calloutSearch: {
      borderColor: "transparent",
      justifyContent: 'center',
      alignItems: 'center',
      width: 300,
      height: 50,
      borderWidth: 0.0  
    },
    routeUpButton: {
      position: 'absolute',
      justifyContent:'center',
      alignItems:'center',
      left: '10%',
      right: '10%',
      top: '85%',
      bottom: '8%',
      borderRadius: windowWidth * 0.1, // 10% of the screen width
      backgroundColor: "#5F192A"
    },
    whereToText:{
      top:'13%',
      left: '29%',
      fontFamily: 'SansationBold',
      fontSize: 36,
      alignItems: 'center',
      justifyContent: 'center',
      color:'#FFFFFF'
    },
    wellGiveText:{
      top:'13.2%',
      left: '22%',
      fontFamily: 'Sansation',
      fontSize: 18,
      alignItems: 'center',
      justifyContent: 'center',
      color:'#FFFFFF'
    },
    whereToGoText:{
      top: '25%',
      left: '15%',
      fontFamily: 'SansationBold',
      fontStyle: 'normal',
      fontSize: 16,
      alignItems: 'center',
      justifyContent: 'center',
      color:'#FFFFFF'
    },
    whereToGoButton:{
      top: '26%',
      left: '15%',
      width: '70%',
      height: '8%',
      backgroundColor: 'rgba(255, 255, 255, 0.50)',
      borderRadius: windowWidth * 0.1, // 10% of the screen width
    },
    whereToGoInput:{
      top:'25%',
      left:'10%',
    },
    howManyDaysText:{
      top: '31%',
      left: '15%',
      fontFamily: 'SansationBold',
      fontSize: 16,
      alignItems: 'center',
      justifyContent: 'center',
      color:'#FFFFFF'
    },
    howManyDaysButton:{
      top: '32%',
      left: '15%',
      width: '70%',
      height: '8%',
      backgroundColor: 'rgba(255, 255, 255, 0.50)',
      borderRadius: windowWidth * 0.1, // 10% of the screen width
    },
    routeUpInput:{
      fontFamily: 'SansationBold',
      fontSize: 14
    }

});

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  square: {
    width: 280,
    height: 300,
    backgroundColor: 'lightgrey',
    borderRadius: 10,
    overflow: 'hidden',
    elevation: 5, // Adds a shadow (Android)
    shadowColor: '#000', // Adds a shadow (iOS)
    shadowOffset: { width: 0, height: 2 }, // Adds a shadow (iOS)
    shadowOpacity: 0.25, // Adds a shadow (iOS)
    shadowRadius: 3.84, // Adds a shadow (iOS)
    margin:10
  },
  image: {
    width: '100%',
    height: '40%',
  },
  textContainer: {
    padding: 10,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  description: {
    fontSize: 14,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    padding: 10,
  },
  button: {
    backgroundColor: '#3498db',
    borderRadius: 5,
    paddingVertical: 10,
    paddingHorizontal: 10,
    borderRadius:10
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
  },
});

const loadingScreenStyle = StyleSheet.create({
  imageLogo:{
    top:'-5%',
    width:'50%',
    height:'30%',
  }
})

const ParentStyles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 0,
    paddingTop: 40,
    alignItems:'center',
  },
  header: {
    borderBottomWidth: 1,
    borderBottomColor: '#CCCCCC',
    paddingBottom: 10,
    marginBottom: 20,
  },
  listTitle: {
    fontSize: 30,
    fontFamily:'SansationBold',
    textAlign: 'center',
    marginTop: 10, // Adjust margin top as needed to bring the list name down
  },
  listSubtitle: {
    fontSize: 20,
    fontFamily:'Sansation',
    textAlign: 'center',
    marginTop: 10, // Adjust margin top as needed to bring the list name down
  }
});

const AccordionStyles = StyleSheet.create({
  container: {
    borderBottomWidth: 1,
    borderBottomColor: '#CCCCCC',
    paddingVertical: 10,
    paddingHorizontal: 15,
  },
  container2: {
   
    alignItems:'center',
    borderBottomWidth: 1,
    borderBottomColor: '#CCCCCC',
    paddingVertical: 10,
    paddingHorizontal: 15,
    margin: 10,
  },

  dayContainer: {
    backgroundColor: '#AAAAAA',
    borderRadius: 15,
    alignItems: 'center',
    justifyContent: 'center',
    height: 70,
    width: 250,
    margin:5
  },
  dayText: {
    fontSize: 30,
    textAlign: 'center',
    fontFamily:'Sansation'
  },
  activitiesContainer: {
    marginLeft: 20,
  },
  activityItem: {
    marginBottom: 10,
  },
  activityName: {
    fontWeight: 'bold',
    marginLeft: 10,
    marginTop:20
  },
  activityDescription: {
    marginLeft: 20,
  },
  activityImage: {
    width: '50%',
    height: 200,
    marginBottom: 10,
  },
});