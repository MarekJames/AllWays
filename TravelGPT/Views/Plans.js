/*

Plans.js 
  
  -> File called when the user selects "Travel Plans" in the OptionsScreen of the App.js file
  -> Allows the user to select the amount of days he/she intends to travel and the intended destination
  -> Returns a travel plan generated by the chat gpt api specific to the user input

*/




/******************** Imports Section ********************/ 

// Imports for the react components add buttons, images, text, etc
import React, {useState, useEffect} from 'react';  
import {Image, ActivityIndicator, StyleSheet, View, Text, Pressable, TextInput, Dimensions, TouchableOpacity, ScrollView, BackHandler, Alert} from 'react-native';  
import "react-native-url-polyfill/auto"
import axios from 'axios';
import {getCurrentPositionAsync, requestForegroundPermissionsAsync, reverseGeocodeAsync} from 'expo-location';
import MapView , {Marker, Callout} from 'react-native-maps'
import * as Font from 'expo-font';
import { Configuration, OpenAIApi } from 'openai'
import SVGLogo from '../Images/RouteMasterLogo.svg'


/******************* Global Variables ********************/

var days          // Stores the amount of days the user intends to travel
var destination   // Stores the destination that the user intends to travel to
var listsPlan     // Stores the plan received from the chatgpt api
const width = Dimensions.get('window').width;   // Get width of the user screen
const height = Dimensions.get('window').height; // Get height of the user screen


listsPlan = [
  {"day": "Day 1", 
   "activities" : [{"name": "Visit the Colosseum",
                    "description": "Walk through the colosseum....."},

                    {"name": "Visit the Roman Forum",
                    "description": "Walk through the forum....."},

                    {"name": "Palatine Hill",
                    "description": " Suck my balls in palatine hill"},

                    {"name": "Jao is Gay",
                    "description": "Finger Jao"},

                    {"name": "Jao takes it up the bum",
                    "description": "A lot"}
                    ]},
    {"day": "Day 2", 
    "activities" : [{"name": "Eat at Pizzaria",
                      "description": "Eat at the pizzaria near the colisseum"},

                      {"name": "Visit the river near the...",
                      "description": "Desc for act 2"},

                      {"name": "Palatine Hill",
                      "description": " Suck my balls in palatine hill"},

                      {"name": "aaaaa",
                      "description": "bbbbbbbbb"},

                      {"name": "llllllllll",
                      "description": "oooooooo"}
                      ]},
   {"day": "Day 3",
   "activities" : [{"name": "Visit the Colosseum",
                    "description": "Walk through the colosseum....."},

                    {"name": "Visit the Roman Forum",
                    "description": "Walk through the forum....."},

                    {"name": "Palatine Hill",
                    "description": " Suck my balls in palatine hill"},

                    {"name": "Jao is Gay",
                    "description": "Finger Jao"},

                    {"name": "Jao takes it up the bum",
                    "description": "Sometimes"}
                    ]
    },
    {"day": "Day 4",
    "activities" : [{"name": "Visit the Colosseum",
                     "description": "Walk through the colosseum....."},
 
                     {"name": "Visit the Roman Forum",
                     "description": "Walk through the forum....."},
 
                     {"name": "Palatine Hill",
                     "description": " Suck my balls in palatine hill"},
 
                     {"name": "Jao is Gay",
                     "description": "Finger Jao"},
 
                     {"name": "Jao takes it up the bum",
                     "description": "Sometimes"}
                     ]
     },
     {"day": "Day 5",
     "activities" : [{"name": "Visit the Colosseum",
                      "description": "Walk through the colosseum....."},
  
                      {"name": "Visit the Roman Forum",
                      "description": "Walk through the forum....."},
  
                      {"name": "Palatine Hill",
                      "description": " Suck my balls in palatine hill"},
  
                      {"name": "Jao is Gay",
                      "description": "Finger Jao"},
  
                      {"name": "Jao takes it up the bum",
                      "description": "Sometimes"}
                      ]
      },
      {"day": "Day 6",
      "activities" : [{"name": "Visit the Colosseum",
                       "description": "Walk through the colosseum....."},
   
                       {"name": "Visit the Roman Forum",
                       "description": "Walk through the forum....."},
   
                       {"name": "Palatine Hill",
                       "description": " Suck my balls in palatine hill"},
   
                       {"name": "Jao is Gay",
                       "description": "Finger Jao"},
   
                       {"name": "Jao takes it up the bum",
                       "description": "Sometimes"}
                       ]
       },
       {"day": "Day 7",
       "activities" : [{"name": "Visit the Colosseum",
                        "description": "Walk through the colosseum....."},
    
                        {"name": "Visit the Roman Forum",
                        "description": "Walk through the forum....."},
    
                        {"name": "Palatine Hill",
                        "description": " Suck my balls in palatine hill"},
    
                        {"name": "Jao is Gay",
                        "description": "Finger Jao"},
    
                        {"name": "Jao takes it up the bum",
                        "description": "Sometimes"}
                        ]
        },
        {"day": "Day 8",
        "activities" : [{"name": "Visit the Colosseum",
                         "description": "Walk through the colosseum....."},
     
                         {"name": "Visit the Roman Forum",
                         "description": "Walk through the forum....."},
     
                         {"name": "Palatine Hill",
                         "description": " Suck my balls in palatine hill"},
     
                         {"name": "Jao is Gay",
                         "description": "Finger Jao"},
     
                         {"name": "Jao takes it up the bum",
                         "description": "Sometimes"}
                         ]
         },
         {"day": "Day 9",
         "activities" : [{"name": "Visit the Colosseum",
                          "description": "Walk through the colosseum....."},
      
                          {"name": "Visit the Roman Forum",
                          "description": "Walk through the forum....."},
      
                          {"name": "Palatine Hill",
                          "description": " Suck my balls in palatine hill"},
      
                          {"name": "Jao is Gay",
                          "description": "Finger Jao"},
      
                          {"name": "Jao takes it up the bum",
                          "description": "Sometimes"}
                          ]
          }
]  // Test route plan

var routePlan = []  // Stores the specific day to show the route plan

// Configs the apiKey -> We may need to encrypt this key
const config = new Configuration({
  apiKey: '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'
})

// Configs the openai api
const openai = new OpenAIApi(config)

// Access key to the images API
const accessKey = 'Q37z9gm8MYXdVPEDA6MFPe77A9jHWLdM9pLtqr060Xo'




/*********************** Classes *************************/

/*

  PlansScreen class
  Displayed after selecting Travel Plans in the OptionsScreen of the App.js file
  Allows the user to choose the amount of days he/she intends to travel and the desired destination

*/
export class PlansScreen extends React.Component {  
    
    // Constructor
    constructor(props) {
      super(props);
      this.state = {
          fontsLoaded: false
      }
    }

    // Load text fonts function
    async loadFonts() {
      await Font.loadAsync({
        'Sansation': require('../assets/fonts/Sansation_Regular.ttf'),
        'SansationBold': require('../assets/fonts/Sansation_Bold.ttf'),
      });
      this.setState({ fontsLoaded: true });
    }

    // Call load fonts function after component mounted
    componentDidMount() {
      this.loadFonts();
    }

    // pontosScreen Function that configs what is displayed in this class
    pontosScreen = () => {
     
      // Defines a constant to store the amount of days
      const [number, onChangeNumber] = React.useState('');

      // Equals the days global variable to the value of the number variable
      useEffect(() => {
        days = number
      })

      // Defines the screen components
      return (

        <View style={PlansScreenStyles.container}>
          {/* Title and subtitle */}  
          <Text style = {PlansScreenStyles.whereToText}>Where to?</Text>
          <Text style = {PlansScreenStyles.wellGiveText}>We'll give you the route for it</Text>
          
          {/* Destination Input */}
          <Text style = {PlansScreenStyles.whereToGoText}>Where to go?</Text>
          <Pressable style = {PlansScreenStyles.whereToGoButton} onPress = { () => {this.props.navigation.navigate("MapsPlans")}}>
            <TextInput
            style = {PlansScreenStyles.whereToGoInput}
            editable = {false}
            placeholder ="Click here"
            placeholderTextColor={'#000000'}
            />
          </Pressable>

          {/* Number of days Input */}
          <Text style = {PlansScreenStyles.howManyDaysText}>How many days?</Text>
          <Pressable style = {PlansScreenStyles.howManyDaysButton}>
            <TextInput
            style = {PlansScreenStyles.whereToGoInput}
            placeholder ="Click here"
            placeholderTextColor={'#000000'}
            onChangeText={onChangeNumber}
            value = {number}
            />
          </Pressable>

          {/* Route Up button */}
          <Pressable style = {PlansScreenStyles.routeUpButton}  onPress = { () => {getPlan(this.props.navigation)}}>
            <TextInput
            style = {PlansScreenStyles.routeUpInput}
            editable = {false}
            placeholder ="Route up!"
            placeholderTextColor={'#FFFFFF'}
            />
          </Pressable>

        </View>  
      ); 
    }

    // Renders the screen components defined in the pontosScreen function
    render() {  
      return (
        <this.pontosScreen></this.pontosScreen>
      )
        
    }
     
}

/*

  MapsPlansScreen class
  Displayed when user selects to choose a destination
  Allows the user to pin their destination in a google maps environment

*/
export class MapsPlansScreen extends React.Component { 

    // Function that sets the location variable, and displays the maps screen
    mapsScreen = () => {

      // Define the location variable and the function that will update it
      const [location, setLocation] = useState(false);

      // Gets the coordinates from the pin and sets the location
      async function getLocation(){
  
        const {granted} = await requestForegroundPermissionsAsync()
        if(granted){
          const currentPosition = await getCurrentPositionAsync() 
          setLocation(currentPosition.coords)
        }
        else{
          console.log("Didn't give permissions")
        }
      
      }
      
      // Calls the getLocation function when the screen is loaded
      useEffect(() => {
        getLocation()
      } , []);
      
      // Displays the screen
      return (
        
        <View style={MapsPlansScreenStyles.container}> 
          {/* Shows the Google Maps */}
          {(location && 
          <MapView 
            style = {MapsPlansScreenStyles.mapContainer}
            onPress= {e => setLocation(e.nativeEvent.coordinate)}
            initialRegion = {{
              latitude: location.latitude,
              longitude:location.longitude,
              latitudeDelta: 0.05,
              longitudeDelta: 0.05
            }}
          >
            {/* Shows the marker on the map */}
            <Marker coordinate={{
              latitude: location.latitude,
              longitude: location.longitude
            }}></Marker>

          </MapView>
          )} 

          {/* Done button */}
          <Callout>
            <View style={MapsPlansScreenStyles.calloutView} >
              <Pressable style={MapsPlansScreenStyles.calloutSearch} onPress = {() => {destination = location; this.props.navigation.navigate('Plans')}}>
                <Text >
                  Done
                </Text>
              </Pressable>
            </View>
          </Callout>

        </View> 
      );
    }
    
    // Renders the screen by calling the mapsScreen function
    render() { 
        return (
          <this.mapsScreen/>
        )
    }
}

/*

  LoadingScreen class
  Used when waiting for the AI response

*/
export class LoadingScreen extends React.Component{
  
  // Renders the loading screen
  render(){
    return (
      <View style = {LoadingScreenStyle.container}>  
        
        {/* Show Logo */}
        <SVGLogo
          style = {LoadingScreenStyle.imageLogo}
        />

        {/* Title and subtitle */}
        <Text style = {LoadingScreenStyle.titleText}> Generating your response</Text>
        <Text style = {LoadingScreenStyle.subtitleText}> Wait a moment</Text>
        
        <Text> {" "}</Text>

        {/* Loading indicator */}
        <ActivityIndicator size="large"/>

      </View>
    )
  }
}

/*

  DaysScreen class
  Displayed when the user selects a day from the route plan
  Shows the detailed route plan for the specific day

*/
export class DaysScreen extends React.Component {  
  
  // Constructor
  constructor(props) {
    super(props);
    this.state = {
      fontsLoaded: false,
      showDayRoutePlan: false
    };
  }
  
  // Load text fonts function
  async loadFonts() {
    await Font.loadAsync({
      'Sansation': require('../assets/fonts/Sansation_Regular.ttf'),
      'SansationBold': require('../assets/fonts/Sansation_Bold.ttf'),
    });
    this.setState({ fontsLoaded: true });
  }

  // Call load fonts function after component mounted
  componentDidMount() {
    this.loadFonts();
  }

  // Function that displays the list of days
  lists = () => {
    // Only show after the fonts are loaded
    if (this.state.fontsLoaded) {
      return listsPlan.map((item, index) => (
        <TouchableOpacity key={item.day} style = {DaysListStyles.dayContainer} onPress={() => {routePlan= listsPlan[index]; this.setState({ showDayRoutePlan: true })}}>
          <Text style = {DaysListStyles.dayText}>{item.day}</Text>
        </TouchableOpacity>
      ));
    }
  }

  // Renders the screen
  render() {

    // Const that gets the images for the specific activities
    // Also defines what is shown in the specific day route plan screen
    const DayRoutePlan = () => {

      // Define the image variable and the associated function
      const [towerOfPisaImage, setTowerOfPisaImage] = useState([]);
      
      // Called when the screen is loaded
      useEffect(() => {
        // Fetch image of the Leaning Tower of Pisa when the component mounts
        fetchTowerOfPisaImage();
      }, []);
      
      // Called when the user clicks to go back
      useEffect(() => {
        // Const that alerts the user that he/she pressed the go back button
        const backAction = () => {
          Alert.alert('Hold on!', 'Are you sure you want to go back?', [
            {
              text: 'Cancel',
              onPress: () => null,
              style: 'cancel',
            },
            {text: 'YES', onPress: () => this.setState({ showDayRoutePlan: false })},
          ]);
          return true;
        };
    
        const backHandler = BackHandler.addEventListener(
          'hardwareBackPress',
          backAction,
        );
    
        return () => backHandler.remove();
      }, []);
    
      // Const that calls the Image API
      const fetchTowerOfPisaImage = async () => {
        try {
          const accessKey = accessKey; // Replace with your actual Unsplash Access Key
          const response = await axios.get('https://api.unsplash.com/photos/random', {
            params: {
              client_id: 'Q37z9gm8MYXdVPEDA6MFPe77A9jHWLdM9pLtqr060Xo',
              query: 'Tower of Pisa Italy', // Search query for the Tower of Pisa in Italy
              count: 5, // Number of images you want to fetch (in this case, just one)
            },
          });
    
          // Store the image URL in state
          const imagesOfPisa = response.data.map((photo) => photo.urls.regular);
          setTowerOfPisaImage(imagesOfPisa);
        } catch (error) {
          console.error('Error fetching image:', error);
        }
      };
      
      // Only show the screen after the images are loaded
      if (towerOfPisaImage) { 
        return routePlan.activities.map((item, index) => (   
          
          <View style={ActivitiesListStyles.square} key={index}>

            {/* Image at the top occupying 50% of the square */}
            <Image
              source={{ uri: towerOfPisaImage[index] }}
              style={ActivitiesListStyles.image}
            />

            {/* Title and description */}
            <View style={ActivitiesListStyles.textContainer}>
              <Text style={ActivitiesListStyles.title}>Tower of Pisa</Text>
              <Text style={ActivitiesListStyles.description}>
                Description text goes here. Replace this with actual description.
              </Text>
            </View>

            {/* Buttons at the bottom */}
            <View style={ActivitiesListStyles.buttonContainer}>
              <TouchableOpacity style={ActivitiesListStyles.button}>
                <Text style={ActivitiesListStyles.buttonText}>Maps</Text>
              </TouchableOpacity>
              <TouchableOpacity style={ActivitiesListStyles.button}>
                <Text style={ActivitiesListStyles.buttonText}>+Info</Text>
              </TouchableOpacity>
            </View>

          </View>
        ))
      }
    }

    // If fonts are loaded and showDayRoutePlan is 0 (Shows the list of days)
    if(this.state.fontsLoaded && !this.state.showDayRoutePlan){
      return (

        <View style={ParentStyles.container}>
          
          {/* Title and description */}
          <Text style={ParentStyles.listTitle}> Discover "City Name" </Text>
          <Text style={ParentStyles.listSubtitle}> Here is the perfect route for "Number" days </Text>
          
           {/* Scroll view with the list of days */}
          <ScrollView style={{flex:1}}>
            {this.lists()}
          </ScrollView>

        </View>
      );
    }
    // If fonts are loaded and showDayRoutePlan is 1 (Shows the route plan for the specified day)
    else if(this.state.fontsLoaded && this.state.showDayRoutePlan){
      return (
        <View style={ParentStyles.container}>
          
          {/* Scroll view of the list of activities for the specified day */}
          <ScrollView style={{flex:1}}>

            {/* Title and description */}
            <Text style={ParentStyles.listTitle}> Discover "City Name" </Text>
            <Text style={ParentStyles.listSubtitle}> Here is the perfect route for "Number" days </Text>

            {/* Specified Day */}
            <Text style={ParentStyles.dayText}> {routePlan.day} </Text>
            
            {/* List of activities, description and, maps and info buttons */}
            <View style={{alignItems:'center'}}>
              <DayRoutePlan/>
            </View>

          </ScrollView>
        
        </View>
      );
    }
  }
}




/********************** Functions ************************/

/*

  getPlan Function
  Calls the OpenAI to get the route plan for the specified days and destination
  Calls the LoadingScreen while waiting for the response
  Calls the ListPlans after the response is received and verified

*/
async function getPlan(navigator) {
  // Get city and contry via the location coordinates
  //const city = await reverseGeocodeAsync(destination)

  // Prompt to submit to the OpenAI
  //var prompt = 'Can you give a JSON file with a plan for ' + days +' days in ' + city[0].city +', '+ city[0].country +' using this format as example [{"day": "day1", "activities" : ["activity1", "activity2", "activity3"]}] ? Give 5 activities for each day'
  var prompt = 'Can you give a JSON file with a plan for ' + days +' days in Rome, Italy using this format as example [{"day": "day1", "activities" : ["activity1", "activity2", "activity3"]}] ? Give 5 activities for each day'
  
  // Navigate to the LoadingScreen while waiting for the response
  navigator.navigate("LoadingScreen")

  // Call the OpenAI to get the route plan
  // const res = await openai.createCompletion({
  //   model: "text-davinci-003",
  //   prompt: prompt,
  //   max_tokens: 2048
  // })

  //console.log(res.data.choices[0].text)
  //console.log(JSON.parse(res.data.choices[0].text))

  // Parse the OpenAI response to JSON
  //listsPlan = JSON.parse(res.data.choices[0].text)

  // Waits 10 seconds for testing purposes
  // Only needed if chatgpt is commented
  const delay = ms => new Promise(async resolve => setTimeout(resolve, ms))
  await delay(1000)

  // Navigate to the ListPlans to show the days
  navigator.navigate("Days")
  
}




/********************* Stylesheets ***********************/

// Used for the PlansScreen class
const PlansScreenStyles = StyleSheet.create({

    container: {
      backgroundColor: '#C68092',
      flex: 1, 
      alignItems: 'stretch',
      width:'100%',
      height:'100%'
    },
    routeUpButton: {
      position: 'absolute',
      justifyContent:'center',
      alignItems:'center',
      left: '10%',
      right: '10%',
      top: '85%',
      bottom: '8%',
      borderRadius: width * 0.1, // 10% of the screen width
      backgroundColor: "#5F192A"
    },
    whereToText:{
      top:'13%',
      left: '29%',
      fontFamily: 'SansationBold',
      fontSize: 36,
      alignItems: 'center',
      justifyContent: 'center',
      color:'#FFFFFF'
    },
    wellGiveText:{
      top:'13.2%',
      left: '22%',
      fontFamily: 'Sansation',
      fontSize: 18,
      alignItems: 'center',
      justifyContent: 'center',
      color:'#FFFFFF'
    },
    whereToGoText:{
      top: '25%',
      left: '15%',
      fontFamily: 'SansationBold',
      fontStyle: 'normal',
      fontSize: 16,
      alignItems: 'center',
      justifyContent: 'center',
      color:'#FFFFFF'
    },
    whereToGoButton:{
      top: '26%',
      left: '15%',
      width: '70%',
      height: '8%',
      backgroundColor: 'rgba(255, 255, 255, 0.50)',
      borderRadius: width * 0.1, // 10% of the screen width
    },
    whereToGoInput:{
      top:'25%',
      left:'10%',
    },
    howManyDaysText:{
      top: '31%',
      left: '15%',
      fontFamily: 'SansationBold',
      fontSize: 16,
      alignItems: 'center',
      justifyContent: 'center',
      color:'#FFFFFF'
    },
    howManyDaysButton:{
      top: '32%',
      left: '15%',
      width: '70%',
      height: '8%',
      backgroundColor: 'rgba(255, 255, 255, 0.50)',
      borderRadius: width * 0.1, // 10% of the screen width
    },
    routeUpInput:{
      fontFamily: 'SansationBold',
      fontSize: 14
    }

});

// Used for the MapsPlansScreen class
const MapsPlansScreenStyles = StyleSheet.create({
  container:{
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  mapContainer:{
    width: '100%',
    height: '100%'
  },
  calloutView: {
    flex:0.3,
    flexDirection: "row",
    backgroundColor: "rgba(255, 255, 255, 0.9)",
    borderRadius: 10,
    top:300,
    width: "100%",
    height: "100%",
  },
  calloutSearch: {
    borderColor: "transparent",
    justifyContent: 'center',
    alignItems: 'center',
    width: 300,
    height: 50,
    borderWidth: 0.0  
  }
})

// Used for the LoadingScreen class
const LoadingScreenStyle = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  imageLogo:{
    top:'-5%',
    width:'50%',
    height:'30%',
  },
  titleText:{
    fontSize: 20,
    fontFamily:'SansationBold'
  },
  subtitleText:{
    fontSize: 15,
    fontFamily:'Sansation'
  },
})

// The 3 styles below are used for the DaysScreen class
const ParentStyles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 0,
    paddingTop: 40,
    alignItems:'center',
  },
  header: {
    borderBottomWidth: 1,
    borderBottomColor: '#CCCCCC',
    paddingBottom: 10,
    marginBottom: 20,
  },
  listTitle: {
    fontSize: 30,
    fontFamily:'SansationBold',
    textAlign: 'center',
    marginTop: 10, // Adjust margin top as needed to bring the list name down
  },
  listSubtitle: {
    fontSize: 20,
    fontFamily:'Sansation',
    textAlign: 'center',
    marginTop: 10, // Adjust margin top as needed to bring the list name down
  },
  dayText: {
    fontSize: 30,
    textAlign: 'center',
    fontFamily:'Sansation'
  },
});

const DaysListStyles = StyleSheet.create({
  dayContainer: {
    backgroundColor: '#AAAAAA',
    borderRadius: 15,
    alignItems: 'center',
    justifyContent: 'center',
    height: 70,
    width: 250,
    margin:5
  },
  dayText: {
    fontSize: 30,
    textAlign: 'center',
    fontFamily:'Sansation'
  },
})

const ActivitiesListStyles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  square: {
    width: width * 0.9, // 90% of the device width
    height: height * 0.4,
    backgroundColor: 'lightgrey',
    borderRadius: 10,
    overflow: 'hidden',
    elevation: 5, // Adds a shadow (Android)
    shadowColor: '#000', // Adds a shadow (iOS)
    shadowOffset: { width: 0, height: 2 }, // Adds a shadow (iOS)
    shadowOpacity: 0.25, // Adds a shadow (iOS)
    shadowRadius: 3.84, // Adds a shadow (iOS)
    margin: 10,
  },
  image: {
    width: '100%',
    height: '50%', // Adjusted to 100% to fill the container
  },
  textContainer: {
    padding: 10,
    marginTop: 10, // Adjusted margin top for better spacing
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  description: {
    fontSize: 14,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    padding: 10,
  },
  button: {
    backgroundColor: '#3498db',
    paddingVertical: 10,
    paddingHorizontal: 10,
    borderRadius: 20,
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
  },
});